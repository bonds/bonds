<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>management on game, game. repeat.</title><link>https://ggr.com/tags/management.html</link><description>Recent content in management on game, game. repeat.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 May 2022 20:09:25 -0700</lastBuildDate><atom:link href="https://ggr.com/tags/management/index.xml" rel="self" type="application/rss+xml"/><item><title>The +1-1=0 Game vs the 1+1=4 Game</title><link>https://ggr.com/the-1-10-game-vs-the-1-14-game.html</link><pubDate>Tue, 31 May 2022 20:09:25 -0700</pubDate><guid>https://ggr.com/the-1-10-game-vs-the-1-14-game.html</guid><description>I suspect that if you take a somewhat random group of human beings and ask them to organize themselves in order to allocate work and limited resources, most of the time they will find themselves playing a zero sum game with each other. I call it the +1-1=0 game.
The other game to be played is the 1+1=4 game. It&amp;rsquo;s the game of abundance, of creating a bigger pie, of win-wins that benefit everyone.</description></item><item><title>Junior vs Senior Managers</title><link>https://ggr.com/junior-vs-senior-managers.html</link><pubDate>Thu, 05 May 2022 11:26:48 -0700</pubDate><guid>https://ggr.com/junior-vs-senior-managers.html</guid><description>Warning: preference-style opinions ahead, e.g. cherry pie is better than apple pie. That said, I’ve used these opinions in anger, so they may be of interest to mangers trying to get ahead with a leader that thinks like I do.
Junior: my first loyalty is to the team I lead, my downwards team
Senior: my first loyalty is to the team my boss leads, my upwards team
Junior: my span of control is how many people must do what I say</description></item><item><title>Junior vs Senior Engineers</title><link>https://ggr.com/junior-vs-senior-engineers.html</link><pubDate>Thu, 28 Apr 2022 10:46:58 -0700</pubDate><guid>https://ggr.com/junior-vs-senior-engineers.html</guid><description>Warning: preference-style opinions ahead, e.g. pecan pie is better than apple pie. That said, I’ve used these opinions in anger, so they may be of interest to engineers trying to get ahead with a leader that thinks like I do.
Junior: right tool for the job
Senior: right ‘enough’ tool for the job, fewer tools better mastered
Junior: clever solution
Senior: easy to understand solution, even if a bit ugly</description></item><item><title>On Commitment</title><link>https://ggr.com/on-commitment.html</link><pubDate>Sat, 01 Feb 2020 17:35:00 +0000</pubDate><guid>https://ggr.com/on-commitment.html</guid><description>Imagine you have a team of 5, a leader plus 4 others. The leader chooses not to contribute ideas, preferring to select from the ideas of his team. The team members are equally persuasive and generate equally good and viable ideas, but the ideas are as opposite/orthogonal/different as they can be.
The team has decided to make decisions together and fully commit to those decisions, so all their creative, persuasive, and intellectual energy operates in concert.</description></item><item><title>Companies Are Made of People</title><link>https://ggr.com/companies-are-made-of-people.html</link><pubDate>Thu, 30 Jan 2020 00:52:00 +0000</pubDate><guid>https://ggr.com/companies-are-made-of-people.html</guid><description>We&amp;rsquo;ve adopted the Patrick Lencioni stack at Mixbook. We are starting with The Advantage and working our way backwards in order of publication. Turns out companies are made out of human beings. Who knew?</description></item><item><title>Calculate the Full Price of That New Tech</title><link>https://ggr.com/calculate-the-full-price-of-that-new-tech.html</link><pubDate>Wed, 19 Dec 2018 19:52:00 +0000</pubDate><guid>https://ggr.com/calculate-the-full-price-of-that-new-tech.html</guid><description>Next time you get the urge to try out some new tech in production please remember this: 5 years from now, long after you got bored with it, some poor sap is going to be stuck fixing bugs in that new tech code you committed, because no one ever took the time to rip it out, and something in production depends on it. You&amp;rsquo;ve just introduce tech debt that will most likely be wasting someone&amp;rsquo;s time for many years to come.</description></item><item><title>Don't Pay Down Tech Debt With Tech Debt</title><link>https://ggr.com/dont-pay-down-tech-debt-with-tech-debt.html</link><pubDate>Wed, 19 Dec 2018 19:38:00 +0000</pubDate><guid>https://ggr.com/dont-pay-down-tech-debt-with-tech-debt.html</guid><description>An anti-pattern I keep running across is trying to solve tech debt problems by adding a new tool to the stack. It&amp;rsquo;s like planning to pay off some of your $10K in credit card debt by getting a new card with a $5K limit with a lower interest rate&amp;hellip;but then using $1K of it pay down the old card and spending the other $4K on new stuff. Now you&amp;rsquo;ve got $14K of debt to service.</description></item><item><title>Don't Delay Gratification For Others</title><link>https://ggr.com/dont-delay-gratification-for-others.html</link><pubDate>Thu, 13 Sep 2018 15:32:00 +0000</pubDate><guid>https://ggr.com/dont-delay-gratification-for-others.html</guid><description>Its generally thought that the ability to delay your own gratification is correlated with greater success. I buy that. But I think it&amp;rsquo;s the opposite when dealing with others&amp;ndash;giving others what they want right now and you&amp;rsquo;ll win their support, their dollars, and their vote.</description></item><item><title>On Laying a Foundation</title><link>https://ggr.com/on-laying-a-foundation.html</link><pubDate>Fri, 16 Mar 2018 18:39:00 +0000</pubDate><guid>https://ggr.com/on-laying-a-foundation.html</guid><description>When someone says &amp;lsquo;we are laying a foundation for X&amp;rsquo; I take it as code for wasting resources and the sort of lazy thinking that goes with it&amp;hellip;at least if they are talking about going dark to make some software, whether its about the code, infrastructure, tooling, UI, or UX. Real (successful) developers ship value now; rinse, repeat. You don&amp;rsquo;t win a race by standing still.</description></item><item><title>My Ideal Product Manager</title><link>https://ggr.com/my-ideal-product-manager.html</link><pubDate>Tue, 13 Mar 2018 22:08:00 +0000</pubDate><guid>https://ggr.com/my-ideal-product-manager.html</guid><description>My ideal product manager is more interested in disproving their idea than proving it.
They are a scientist with the humility to expect they&amp;rsquo;ll be wrong, the patience to try again, and the hunger to find the truth however unaesthetic it may be. They are a business person, more interested in getting results than questing after their ideal UI or zero bugs. They are a crafts person, not an artist&amp;ndash;they value utility over beauty.</description></item><item><title>Stop Hiring DevOps</title><link>https://ggr.com/stop-hiring-devops.html</link><pubDate>Fri, 21 Jul 2017 21:28:00 +0000</pubDate><guid>https://ggr.com/stop-hiring-devops.html</guid><description>Look. The reason its so hard to find (great) DevOps engineers is that is a shit job at most companies. When last I was hunting for a DevOps lead, most of the folks I talked to had war/horror stories about working at a company (or two or three) where they were on duty 24x7, the codebase was fragile, they got paged a lot (at 2a), and they weren&amp;rsquo;t given the time or help they needed to dig themselves out of the hole they were hired into.</description></item><item><title>The Haskell Programming Book Isn't Good Enough</title><link>https://ggr.com/the-haskell-programming-book-isnt-good-enough.html</link><pubDate>Sat, 15 Oct 2016 00:17:00 +0000</pubDate><guid>https://ggr.com/the-haskell-programming-book-isnt-good-enough.html</guid><description>We (the human race) spend/waste an enormous amount of energy writing code that won&amp;rsquo;t last. We constantly cut ourselves on the sharp edges of C, PHP, Perl, Ruby, Java, and lots of other languages that were the best and brightest of their day, but they don&amp;rsquo;t go far enough protecting us from our own stupidity, laziness, distractedness, busyness&amp;hellip;
Point is, I&amp;rsquo;m looking for a way out of this mess. And as someone in management, I&amp;rsquo;m responsible for either doing nothing or making intentional choices about what tools galaxy my team lives in and how we go about our work of creating business value through software.</description></item><item><title>Ruby vs Haskell: Ruby is Lego, Haskell is Steel</title><link>https://ggr.com/ruby-vs-haskell-ruby-is-lego-haskell-is-steel.html</link><pubDate>Sat, 10 Sep 2016 02:25:00 +0000</pubDate><guid>https://ggr.com/ruby-vs-haskell-ruby-is-lego-haskell-is-steel.html</guid><description>Ruby feels like working with Legos: its easy to pickup, delightful from the start, and you can make amazing things with it quickly. But as your creations get bigger and bigger, they become increasing awkward and fragile. Using Haskell is like working with steel: its difficult to get started and takes a lot of energy to do anything, even after you&amp;rsquo;re good at it, but you can build very strong, resilient, large structures.</description></item><item><title>Mediocrity Isn't Worth It</title><link>https://ggr.com/mediocrity-isnt-worth-it.html</link><pubDate>Fri, 02 Sep 2016 19:06:00 +0000</pubDate><guid>https://ggr.com/mediocrity-isnt-worth-it.html</guid><description>Companies and teams tend towards mediocrity over time. Call it entropy, call it regression to the mean&amp;hellip;I&amp;rsquo;ve been pondering my own sins in this area lately, and I find myself wanting.
Mediocrity is infectious and it kills motivation, creativity, and productivity. But its sooo easy. It can start with a bad hire, whose not that bad. They&amp;rsquo;ve been here for years, they are likeable, they are loyal, they&amp;rsquo;ve got outstanding raw potential&amp;hellip;but they struggle to get results.</description></item><item><title>Culture, Brand, (and Founders) FTW</title><link>https://ggr.com/culture-brand-and-founders-ftw.html</link><pubDate>Tue, 26 Jul 2016 17:23:00 +0000</pubDate><guid>https://ggr.com/culture-brand-and-founders-ftw.html</guid><description>The quality of the people and the culture of a company define its trajectory. Brand is the bank where it stores the value it creates along the way. Everything else is implementation detail.
If you don&amp;rsquo;t have great people operating in a great culture, you&amp;rsquo;re operating on borrowed time. Maybe you get lucky and can ride that luck for a while, but unless you build a sustainable, quality culture, you&amp;rsquo;re dying a slow (or fast) death.</description></item><item><title>Minimize Maximum Stupidity</title><link>https://ggr.com/minimize-maximum-stupidity.html</link><pubDate>Mon, 18 Jul 2016 15:00:00 +0000</pubDate><guid>https://ggr.com/minimize-maximum-stupidity.html</guid><description>TL;DR scaling a dev team + code base has more to do with minimizing stupidity than with maximizing brilliance.
I&amp;rsquo;ve worked with some amount of C, C++, Java, Ruby, Python, Bourne Shell, PHP, HTML, Objective-C, Haskell, and Javascript, among others. I&amp;rsquo;ve come to imagine that the range of code quality, of an average line of code by an average engineer, using C as a sort of baseline, looks something like this:</description></item><item><title>An Employee Morale Scale</title><link>https://ggr.com/an-employee-morale-scale.html</link><pubDate>Thu, 26 May 2016 19:03:00 +0000</pubDate><guid>https://ggr.com/an-employee-morale-scale.html</guid><description>The scale goes from low to high morale. My biggest realization of the past five years, related to morale, is how weak a tool high comp is for driving morale. It can make people very happy for a short time, but after that it doesn&amp;rsquo;t do much on its own&amp;ndash;the steady state for high comp (alone) is no better than the &amp;lsquo;passively looking&amp;rsquo; step of the scale.
rage quit actively looking passively looking not looking like the work working efficiently like the boss like the coworkers appreciated learning doing the best work of my career respected internally world famous and loved by many</description></item><item><title>Learning Points</title><link>https://ggr.com/learning-points.html</link><pubDate>Tue, 22 Mar 2016 19:52:00 +0000</pubDate><guid>https://ggr.com/learning-points.html</guid><description>When I joined Mixbook 4 years ago, we were running very large, coarse experiments, where we&amp;rsquo;d spend 3-6 months with 2-4 people building some new feature until we thought it was done, then we&amp;rsquo;d ship. These days, we&amp;rsquo;re a bit leaner, with the same sized teams typically shipping a new experiment within 2-4 weeks. But we don&amp;rsquo;t want to stop there. Lately we&amp;rsquo;ve been talking about how to get it down to 1-2 days per experiment, so we can ship 5 or more per sprint.</description></item><item><title>The Levels of Engineering Culture</title><link>https://ggr.com/the-levels-of-engineering-culture.html</link><pubDate>Mon, 15 Feb 2016 19:06:00 +0000</pubDate><guid>https://ggr.com/the-levels-of-engineering-culture.html</guid><description>Level 1
No process or rules to get in the way! All we do around here is code. It&amp;rsquo;s like 5 years old playing soccer&amp;ndash;everyone runs straight at the ball/latest shiny object. Yay!
Level 2
We have rules/principles/policies/best-practices that we hope (aka think) will make us more productive, i.e. we use CI and CD! All PRs require a code review. 100% test coverage. 20% time (for innovating). We use Scrum/Kanban/Agile. We use planning poker.</description></item><item><title>A Scrum Master Is a Personal Trainer</title><link>https://ggr.com/a-scrum-master-is-a-personal-trainer.html</link><pubDate>Sat, 09 Jan 2016 03:56:00 +0000</pubDate><guid>https://ggr.com/a-scrum-master-is-a-personal-trainer.html</guid><description>Scrum Master is a greatly misunderstood and under appreciated role. On most teams I&amp;rsquo;ve encountered its taken on by the PO or its ignored entirely. I&amp;rsquo;m guilty of this sin myself and when I am not ignoring it, I&amp;rsquo;m playing scrum master across way too many teams, in addition to way too many other duties, so its not done terribly well&amp;hellip;better than nothing I suppose, but better is possible, and, I think, a good investment.</description></item><item><title>On OKRs Requiring Miracles</title><link>https://ggr.com/on-okrs-requiring-miracles.html</link><pubDate>Tue, 05 Jan 2016 19:28:00 +0000</pubDate><guid>https://ggr.com/on-okrs-requiring-miracles.html</guid><description>At least one person says you should be thinking you&amp;rsquo;ll need a miracle to pull off your OKRs or they aren&amp;rsquo;t hard enough. I worry that that sort of goal feels too much like gambling to some of the folks I manage, but what&amp;rsquo;s a better bar for OKR difficulty?
Perhaps the goal should be to have objectives that require innovation to succeed&amp;ndash;they need to be daunting enough that you must realize a new, hitherto unused or not yet invented technique to pull them off.</description></item><item><title>Stables and Volatiles: Goals</title><link>https://ggr.com/stables-and-volatiles-goals.html</link><pubDate>Tue, 22 Dec 2015 15:11:00 +0000</pubDate><guid>https://ggr.com/stables-and-volatiles-goals.html</guid><description>First, if you haven&amp;rsquo;t read Stables and Volatiles, go read it and then come back.
I&amp;rsquo;m working on OKRs this week and pondering whether objectives that require &amp;lsquo;just&amp;rsquo; working hard are good enough, or whether our objectives should require a miracle to pull off. Let&amp;rsquo;s say, for the sake of argument, one of our objectives has a 10% chance of success if we work on it at a normal level and a 20% chance of success if we bust our butts and pull off a couple brilliant moves.</description></item><item><title>Open Interviewing Policy</title><link>https://ggr.com/open-interviewing-policy.html</link><pubDate>Mon, 21 Sep 2015 05:48:00 +0000</pubDate><guid>https://ggr.com/open-interviewing-policy.html</guid><description>I&amp;rsquo;ve been interviewing a lot of people in the past few weeks and I&amp;rsquo;ve been wondering how they, you know, get 4 hours off in the middle of the work day to interview. Fake doctor&amp;rsquo;s appointment? Call in sick? No one is paying attention to their office hours? WFH that becomes undocumented PTO? My guess is its not on the record&amp;hellip;they aren&amp;rsquo;t telling their bosses that they are going on interviews.</description></item><item><title>Results > Hours</title><link>https://ggr.com/results-hours.html</link><pubDate>Mon, 01 Jun 2015 20:43:00 +0000</pubDate><guid>https://ggr.com/results-hours.html</guid><description>When one is trying to increase productivity, there are 3 areas of particular interest:
hours worked tasks completed per hour worked unit of impact per task completed Hours Worked The company culture where you work sets the tone for how many hours you work. Startups tend to value long hours, but plenty of larger companies do too. Adding more hours can be very effective in the short-run, but in the long-run the gains can be elusive, as people shift more of their personal chores and relaxation time into their work hours in order to satisfy the expectation that they are in the office all the time, while still striking the balance that they prefer.</description></item><item><title>The Scott Bonds Rules of Presentations</title><link>https://ggr.com/the-scott-bonds-rules-of-presentations.html</link><pubDate>Thu, 15 Jan 2015 16:35:00 +0000</pubDate><guid>https://ggr.com/the-scott-bonds-rules-of-presentations.html</guid><description>I&amp;rsquo;ve got another deck to put together. Seems like a good time to write down the Scott Bonds Rules of Presentations:
entertain your audience do not forget to make your point do not put text on your slides Entertain Your Audience This is the first rule because its the most important. When you entertain your audience, you make them into better listeners. They are more engaged, more open minded, and more likely to absorb and retain your message.</description></item><item><title>How To Screen Resumes For 'A' Players</title><link>https://ggr.com/how-to-screen-resumes-for-a-players.html</link><pubDate>Wed, 22 Oct 2014 21:34:00 +0000</pubDate><guid>https://ggr.com/how-to-screen-resumes-for-a-players.html</guid><description>Recently I was asked how I figure out whether the resume I&amp;rsquo;m looking at belongs to an &amp;lsquo;A&amp;rsquo; player or someone of a lesser grade. Here&amp;rsquo;s what I said:
A&amp;rsquo;s tend to list accomplishments, and they tend to have accomplishments that really stand out, even in their hobbies. You see stuff like 1st place in the Chicago Assembler Speed Competition on A engineers&amp;rsquo; resumes. Designers point to a portfolio that you look at and go &amp;lsquo;wow&amp;rsquo;.</description></item><item><title>The Coming War for Design Talent</title><link>https://ggr.com/the-coming-war-for-design-talent.html</link><pubDate>Wed, 11 Apr 2012 19:08:00 +0000</pubDate><guid>https://ggr.com/the-coming-war-for-design-talent.html</guid><description>While the war rages on for software engineers, I can&amp;rsquo;t help wondering when UX, interaction designers, and product managers are going to have their turn. For a lot of software projects adding a rockstar engineer can boost productivity by more than their substantial individual contribution, but adding a rockstar designer can double a team&amp;rsquo;s output.
Let&amp;rsquo;s say, for the sake of argument, that 1 in 5 of a good designer&amp;rsquo;s decisions are adding value a year after they are released; let&amp;rsquo;s say a rockstar achieves 2 in 5.</description></item><item><title>Two Kinds of Engineering Leader</title><link>https://ggr.com/two-kinds-of-engineering-leader.html</link><pubDate>Sat, 07 Apr 2012 16:53:00 +0000</pubDate><guid>https://ggr.com/two-kinds-of-engineering-leader.html</guid><description>When a software company is searching for a new CTO or VP of Engineering, they tend to look for either a Chief of Surgery or a Head Coach. Hiring the right (or wrong) one can mean the difference between success and failure as a company. Knowing which you are can help you choose the right opportunity.
The Chief of Surgery is one of the best, if not the best, software engineer at the company.</description></item></channel></rss>